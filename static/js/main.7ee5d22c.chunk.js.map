{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Inputbar/Inputbar.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","class","Inputbar","props","className","htmlFor","type","name","value","title","onChange","handleInputChange","onClick","handleSearchMovie","Card","src","poster","alt","director","handleAddToWatchList","App","state","watchlist","movie","target","setState","event","preventDefault","axios","get","then","data","console","log","handleAddToWatchlist","JSON","parse","stringify","push","handleDeleteMovie","i","splice","this","Title","Poster","Director","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0PAWeA,EATG,WAChB,OACE,yBAAKC,MAAM,aACT,wBAAIA,MAAM,aAAV,iBACA,uBAAGA,MAAM,QAAT,iECgBSC,EApBE,SAAAC,GACf,OACE,oCACA,kDACA,8BACE,yBAAKC,UAAU,cACb,2BAAOC,QAAQ,SAAf,SACA,2BACEC,KAAK,OACLF,UAAU,eACVG,KAAK,QACLC,MAAOL,EAAMM,MACbC,SAAUP,EAAMQ,qBAEpB,4BAAQP,UAAU,kBAAkBQ,QAAST,EAAMU,mBAAnD,mBCDSC,EAbF,SAAAX,GACX,OACE,yBAAKC,UAAU,QACb,yBAAKW,IAAKZ,EAAMa,OAAQZ,UAAU,eAAea,IAAKd,EAAMM,QAC5D,yBAAKL,UAAU,aACb,wBAAIA,UAAU,cAAcD,EAAMM,OAClC,uBAAGL,UAAU,aAAb,eAAsCD,EAAMe,UAC5C,4BAAQd,UAAU,kBAAkBQ,QAAST,EAAMgB,sBAAnD,uBCyEOC,E,2MA3EbC,MAAQ,CACNC,UAAW,GACXC,MAAO,GACPd,MAAO,I,EAGTE,kBAAoB,YAAiB,IAAda,EAAa,EAAbA,OACrB,EAAKC,SAAL,eAAiBD,EAAOjB,KAAOiB,EAAOhB,S,EAGxCK,kBAAoB,SAAAa,GAClBA,EAAMC,iBACNC,IAAMC,IAAN,qCAAwC,EAAKR,MAAMZ,MAAnD,oBACGqB,MAAK,YAAsB,IAAbP,EAAY,EAAlBQ,KACPC,QAAQC,IAAIV,GACZ,EAAKE,SAAS,CAAEF,QAAOd,MAAO,S,EAIpCyB,qBAAuB,WACrBF,QAAQC,IAAI,QACZ,IAAIX,EAAYa,KAAKC,MAAMD,KAAKE,UAAU,EAAKhB,MAAMC,YACrDA,EAAUgB,KAAK,EAAKjB,MAAME,OAC1B,EAAKE,SAAS,CAAEH,YAAWC,MAAO,M,EAGpCgB,kBAAoB,SAAAC,GAClB,IAAIlB,EAAYa,KAAKC,MAAMD,KAAKE,UAAU,EAAKhB,MAAMC,YACrDA,EAAUmB,OAAOD,EAAG,GACpB,EAAKf,SAAS,CAAEH,e,wEAGR,IAAD,OACP,OACE,yBAAKlB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACd,kBAAC,EAAD,CACAK,MAASiC,KAAKrB,MAAMZ,MACpBE,kBAAqB+B,KAAK/B,kBAC1BE,kBAAqB6B,KAAK7B,oBAGxB6B,KAAKrB,MAAME,MAAMoB,MAChB,kBAAC,EAAD,CACE3B,OAAU0B,KAAKrB,MAAME,MAAMqB,OAC3BnC,MAASiC,KAAKrB,MAAME,MAAMoB,MAC1BzB,SAAYwB,KAAKrB,MAAME,MAAMsB,SAC7B1B,qBAAwBuB,KAAKR,uBAC1B,MAET,yBAAK9B,UAAU,YACb,8CACA,wBAAIA,UAAU,cAEVsC,KAAKrB,MAAMC,UAAUwB,KAAI,SAACvB,EAAOiB,GAAR,OACvB,wBAAIO,IAAKP,EAAGpC,UAAU,qEACnBmB,EAAMoB,MACP,4BAAQ/B,QAAS,kBAAM,EAAK2B,kBAAkBC,IAAIpC,UAAU,kBAA5D,iB,GAjEF4C,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.7ee5d22c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Jumbotron = () => {\r\n  return (\r\n    <div class=\"jumbotron\">\r\n      <h1 class=\"display-4\">Watchlist App</h1>\r\n      <p class=\"lead\">Search for your favorite movies and add them to a watchlist</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Jumbotron","import React from 'react'\r\n\r\nconst Inputbar = props => {\r\n  return (\r\n    <>\r\n    <h4>Search For A Movie</h4>\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"title\">Title</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          name=\"title\"\r\n          value={props.title}\r\n          onChange={props.handleInputChange} />\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={props.handleSearchMovie}>Search Movie</button>\r\n    </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Inputbar","import React from 'react'\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={props.poster} className=\"card-img-top\" alt={props.title} />\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{props.title}</h5>\r\n        <p className=\"card-text\">Directed by {props.director}</p>\r\n        <button className=\"btn btn-success\" onClick={props.handleAddToWatchList}>Add To Watchlist</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Jumbotron from './components/Jumbotron'\nimport Inputbar from './components/Inputbar'\nimport Card from './components/Card'\nclass App extends Component {\n\n  state = {\n    watchlist: [],\n    movie: {},\n    title: ''\n  }\n\n  handleInputChange = ({ target }) => {\n    this.setState({ [target.name]: target.value })\n  }\n\n  handleSearchMovie = event => {\n    event.preventDefault()\n    axios.get(`https://www.omdbapi.com/?t=${this.state.title}&apikey=trilogy`)\n      .then(({ data: movie }) => {\n        console.log(movie)\n        this.setState({ movie, title: '' })\n      })\n  }\n\n  handleAddToWatchlist = () => {\n    console.log('ping')\n    let watchlist = JSON.parse(JSON.stringify(this.state.watchlist))\n    watchlist.push(this.state.movie)\n    this.setState({ watchlist, movie: {} })\n  }\n\n  handleDeleteMovie = i => {\n    let watchlist = JSON.parse(JSON.stringify(this.state.watchlist))\n    watchlist.splice(i, 1)\n    this.setState({ watchlist })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Jumbotron/>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n           <Inputbar\n           title = {this.state.title} \n           handleInputChange = {this.handleInputChange}\n           handleSearchMovie = {this.handleSearchMovie}\n           />\n           \n            {this.state.movie.Title ?\n              <Card \n                poster = {this.state.movie.Poster}\n                title = {this.state.movie.Title}\n                director = {this.state.movie.Director}\n                handleAddToWatchList = {this.handleAddToWatchlist}\n              /> : null}\n          </div>\n          <div className=\"col-md-6\">\n            <h4>Your Watchlist</h4>\n            <ul className=\"list-group\">\n              {\n                this.state.watchlist.map((movie, i) => (\n                  <li key={i} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                    {movie.Title}\n                    <button onClick={() => this.handleDeleteMovie(i)} className=\"btn btn-danger\">x</button>\n                  </li>\n                ))\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}